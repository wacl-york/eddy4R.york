% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wrap.flux.R
\name{wrap.flux}
\alias{wrap.flux}
\title{Wrapper function: Calculate turbulent vertical flux and auxiliary variables}
\usage{
wrap.flux(
  data,
  AlgBase = c("mean", "trnd", "ord03")[1],
  SlctPot = FALSE,
  PresPot = eddy4R.base::IntlNatu$Pres00,
  ListGasSclr = list(rtioMoleDryCo2 = list(Conv = "densMoleAirDry", Unit =
    base::data.frame(InpVect = "m s-1", InpSclr = "molCo2 mol-1Dry", Conv = "mol m-3",
    Out = "mol m-2 s-1"), NameOut = "fluxCo2")),
  ...
)
}
\arguments{
\item{data}{A data frame of class "numeric" and each variable with independent unit attribute assigned. The minimum requirements are: 1) In order to return shear stress, i.e. for the internal call to def.flux.vect() to succeed: the wind vector in meteorological ENU convention with the variables data$veloXaxs (latitudinal wind speed, positive from west), data$veloYaxs (longitudinal wind speed, positive from south), and data$veloZaxs (vertical wind speed, positive from below), each with unit attribute [m s-1]. 2) In order to return scalar fluxes of temperature, H2O and CO2, i.e. for the internal call to def.flux.sclr() to succeed: atmospheric pressure data$presAtm with unit attribute [Pa], air temperature data$tempAir with unit attribute [K], water vapor dry mole fraction data$rtioMoleDryH2o with unit attribute [molH2o mol-1Dry], and CO2 dry mole fraction data$rtioMoleDryCo2 with unit attribute [molCo2 mol-1Dry]. 3) In order to return boundary layer scaling variables, i.e. for the internal call to def.var.abl() to succeed: effective measurement height data$distZaxsMeas with unit attribute [m], and atmospheric boundary layer depth data$distZaxsAbl with unit attribute [m]. 4) Only if AlgBase != mean, for the internal call to def.stat.sta.diff() to succeed: the independent variable data$idep needs to be provided to perform detrending or polynomical regression. data$idep can be assigned flexibly, e.g. for tower measurements the passed time in units [s] or [h], or for aircraft measurements the stretch of air flown through in units [km] or [m]. 5) Optionally, additional variables data$ can be passed through, provided they have the same number of observations as the variables in 1) - 4), and each variable has an independent unit attribute assigned. The following outputs are reported for optional variables: $base (base states), $data (data including internal calculations), $diff (instantaneous differences), $max (maximums), $mean (means), $min (minimums), and $sd (standard deviations).}

\item{AlgBase}{A vector of length 1 that defines the base state with respect to which instantaneous differences and standard deviations are calculated, of class "character" and no unit attribute. Contains one of AlgBase <- c("mean", "trnd", "ord03")[1] and defaults to "mean", with the additional options detrending "trnd" and 3rd-order polynomial "ord03". See ?eddy4R.base::def.base.ec() for additional details. When AlgBase is set to "trnd" or "ord03", the variable inp$idep is required, which provides the independent variable for interpolation.}

\item{SlctPot}{A logical TRUE or FALSE: use potential temperature and densities? [-]}

\item{PresPot}{A vector of length 1 and of class "numeric". If is.true(SlctPot) it provides the reference pressure level for which potential temperature and densities are calculated. [-]}

\item{ListGasSclr}{A list of gas scalars in data (not including water vapor) to pass to def.flux.sclr() function that includes the Unit data frame. A data frame with the entries InpVect, InpSclr, Conv, Out, of class "character". To ensure consistent units of the returned object, Unit needs to be specified with the constraint that Unit$Out = Unit$InpVect * Unit$InpSclr * Unit$Conv. If the function call argument conv is not specified, then Unit$Conv should be supplied as = "-". The Conv list is character variable that is used to grab the conversion factor from variables in the statStaDiff$base data.frame. If desired conversion factor is not available in can be added directly to data. This defaults to "densMoleAirDry" which is calculated in the function to provide molar fluxes [mol m-2 s-1]. Lastly, NameOut is a character variable for the output name (e.g. "fluxCo2")}

\item{...}{Additional arguments that can be passed to the wrapper function.}
}
\value{
A list with the elements $base (base states), $conv (scalar flux conversion factors), $corr (correlations), $data (data including internal calculations), $diff (instantaneous differences), $max (maximums), $mean (means), $min (minimums), $mtrxRot01 (transformation matrix for stress tensor), and $sd (standard deviations).
}
\description{
Function wrapper. Calculate turbulent vertical flux and auxiliary variables.
}
\examples{
Currently none
}
\references{
Metzger, S., Durden, D., Sturtevant, C., Luo, H., Pingintha-Durden, N., Sachs, T., Serafimovich, A., Hartmann, J., Li, J., Xu, K., and Desai, A. R.: eddy4R 0.2.0: a DevOps model for community-extensible processing and analysis of eddy-covariance data based on R, Git, Docker, and HDF5, Geosci. Model Dev., 10, 3189-3206, doi:10.5194/gmd-10-3189-2017, 2017.
}
\seealso{
Currently none
}
\author{
Stefan Metzger \email{eddy4R.info@gmail.com}
}
\keyword{eddy-covariance,}
\keyword{flux}
\keyword{turbulent}
